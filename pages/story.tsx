import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useMediaQuery } from "@mantine/hooks";
import {
  Group,
  Avatar,
  Text,
  Accordion,
  Title,
  List,
  Input,
  RadioGroup,
  Radio,
  Loader
} from "@mantine/core";

interface AccordionLabelProps {
  firstName: string;
  lastName: string;
  username: string;
  id: string;
}

function AccordionLabel({
  firstName,
  lastName,
  username,
  id
}: AccordionLabelProps) {
  return (
    <Group noWrap>
      <Avatar radius="xl">{id}</Avatar>
      <div>
        <Text>
          {firstName} {lastName}
        </Text>
        <Text size="sm" color="dimmed" weight={400}>
          @{username}
        </Text>
      </div>
    </Group>
  );
}

interface DemoProps {
  users: Array<User>;
}

function Demo({ users }: DemoProps) {
  const [input, setInput] = useState("");
  const [radio, setRadio] = useState("name");

  const matches = useMediaQuery("(min-width: 800px)");

  const items = users
    .filter(item => {
      if (!input) {
        return true;
      }

      if (radio === "name") {
        return `${item.firstName} ${item.lastName}`.includes(input);
      }

      return item.id === input;
    })
    .map(item => (
      <Accordion.Item label={<AccordionLabel {...item} />} key={item.id}>
        <List type="ordered" size={matches ? "md" : "sm"}>
          <List.Item>{item[0]}</List.Item>
          <List.Item>{item[1]}</List.Item>
          <List.Item>{item[2]}</List.Item>
          <List.Item>{item[3]}</List.Item>
          <List.Item>{item[4]}</List.Item>
          <List.Item>{item[5]}</List.Item>
          <List.Item>{item[6]}</List.Item>
        </List>
      </Accordion.Item>
    ));

  const handleChange = ({ target: { value } }: any) => {
    setInput(value);
  };

  const handleRadio = (value: any) => {
    setRadio(value);
  };

  return (
    <>
      <div
        style={{
          display: "flex",
          alignItems: "flex-end",
          justifyContent: "space-between",
          width: "100%",
          marginBottom: 20
        }}
      >
        <Input
          value={input}
          onChange={handleChange}
          placeholder={`–í–≤–µ–¥–∏—Ç–µ ${radio === "name" ? "–∏–º—è" : "ID"}`}
          style={{ width: "100%" }}
          mr={20}
        />

        <div style={{ display: "flex", width: 200 }}>
          <RadioGroup
            value={radio}
            onChange={handleRadio}
            label="–ò—Å–∫–∞—Ç—å –ø–æ"
            size={matches ? "md" : "xs"}
          >
            <Radio value="name" label="–ò–º–µ–Ω–∏" />
            <Radio value="id" label="ID" />
          </RadioGroup>
        </div>
      </div>
      <Accordion
        initialItem={-1}
        iconPosition="right"
        style={{
          width: "100%"
        }}
        mb={100}
      >
        {items}
      </Accordion>
    </>
  );
}

interface User {
  firstName: string;
  lastName: string;
  username: string;
  "0": string;
  "1": string;
  "2": string;
  "3": string;
  "4": string;
  "5": string;
  "6": string;
  id: string;
}

interface HomePageProps {
  users: Array<User>;
}

const Story: NextPage<HomePageProps> = ({ users }) => {
  const router = useRouter();
  const [loading, setLoading] = useState(true);

  const matches = useMediaQuery("(min-width: 800px)");

  useEffect(() => {
    const isLoggedIn = localStorage.getItem("isLoggedIn");

    if (isLoggedIn === "true") {
      setLoading(false);
      return;
    }

    router.push("/");
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.container}>
        <main className={styles.main} style={{ margin: 10 }}>
          {!loading ? (
            <>
              <div style={{ marginTop: matches ? 50 : 20 }}>
                <Image
                  src="/assets/story.jpg"
                  height={matches ? "400px" : "300px"}
                  width={matches ? "400px" : "300px"}
                  alt="story-img"
                />
              </div>
              <div className="">
                <Title order={matches ? 3 : 5} mb={5}>
                  –í–æ–ø—Ä–æ—Å—ã
                </Title>
                <List type="ordered" mb={200} size={matches ? "md" : "sm"}>
                  <List.Item>–ö–æ—Ç–∏–∫–∏ –∏–ª–∏ —Å–æ–±–∞—á–∫–∏?</List.Item>
                  <List.Item>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</List.Item>
                  <List.Item>
                    –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —á—Ç–æ –Ω–µ –æ—á–µ–Ω—å, –∞ –º–æ–∂–µ—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
                    –∏–¥–µ—è–º–∏ —á—Ç–æ —É–ª—É—á—à–∏—Ç—å? üòú
                  </List.Item>
                  <List.Item>
                    –ü–æ–ª—É—á–∏–ª(–∞) –ª–∏ —Ç—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã? üßê
                  </List.Item>
                  <List.Item>
                    –•–æ—Ç–µ–ª(–∞) –ª–∏ –± —Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –∫–æ—Ñ–µ –∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?
                  </List.Item>
                  <List.Item>–ö–∞–∫ –Ω–∞–º —Å —Ç–æ–±–æ–π –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è?</List.Item>
                  <List.Item>
                    –ü—Ä–∏–Ω—è–ª(–∞) –ª–∏ —Ç—ã —Ä–µ—à–µ–Ω–∏–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ò–∏—Å—É—Å–æ–º –•—Ä–∏—Å—Ç–æ–º?
                  </List.Item>
                </List>
              </div>
              <Demo users={users} />
            </>
          ) : (
            <Loader />
          )}
        </main>
      </div>

      <footer className={styles.footer}>
        <a href="/" target="_blank" rel="noopener noreferrer">
          Created by @SideswipeLoi
        </a>
      </footer>
    </>
  );
};

export default Story;

export async function getServerSideProps() {
  const data = await fetch("https://622c5c48087e0e041e094b66.mockapi.io/user");
  const users = await data.json();

  return {
    props: {
      users
    }
  };
}
